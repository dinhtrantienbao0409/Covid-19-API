import { ACT_JOB_STATUSES, ACT_JOB_TERMINAL_STATUSES } from '@apify/consts';
import { ApiClientSubResourceOptions } from '../base/api_client';
import { ResourceClient } from '../base/resource_client';
import { ActorVersion, ActorVersionClient } from './actor_version';
import { ActorVersionCollectionClient } from './actor_version_collection';
import { Build } from './build';
import { BuildCollectionClient } from './build_collection';
import { RunClient } from './run';
import { RunCollectionClient } from './run_collection';
import { WebhookUpdateData } from './webhook';
import { WebhookCollectionClient } from './webhook_collection';
/**
 * @hideconstructor
 */
export declare class ActorClient extends ResourceClient {
    constructor(options: ApiClientSubResourceOptions);
    /**
     * https://docs.apify.com/api/v2#/reference/actors/actor-object/get-actor
     */
    get(): Promise<Actor | undefined>;
    /**
     * https://docs.apify.com/api/v2#/reference/actors/actor-object/update-actor
     */
    update(newFields: ActorUpdateOptions): Promise<Actor>;
    /**
     * https://docs.apify.com/api/v2#/reference/actors/actor-object/delete-actor
     */
    delete(): Promise<void>;
    /**
     * Starts an actor and immediately returns the Run object.
     * https://docs.apify.com/api/v2#/reference/actors/run-collection/run-actor
     */
    start(input?: unknown, options?: ActorStartOptions): Promise<ActorRun>;
    /**
     * Starts an actor and waits for it to finish before returning the Run object.
     * It waits indefinitely, unless the `waitSecs` option is provided.
     * https://docs.apify.com/api/v2#/reference/actors/run-collection/run-actor
     */
    call(input?: unknown, options?: ActorStartOptions): Promise<ActorRun>;
    /**
     * https://docs.apify.com/api/v2#/reference/actors/build-collection/build-actor
     * @return {Promise<Build>}
     */
    build(versionNumber: string, options?: ActorBuildOptions): Promise<Build>;
    /**
     * https://docs.apify.com/api/v2#/reference/actors/last-run-object-and-its-storages
     */
    lastRun(options?: ActorLastRunOptions): RunClient;
    /**
     * https://docs.apify.com/api/v2#/reference/actors/build-collection
     */
    builds(): BuildCollectionClient;
    /**
     * https://docs.apify.com/api/v2#/reference/actors/run-collection
     */
    runs(): RunCollectionClient;
    /**
     * https://docs.apify.com/api/v2#/reference/actors/version-object
     */
    version(versionNumber: string): ActorVersionClient;
    /**
     * https://docs.apify.com/api/v2#/reference/actors/version-collection
     * @return {ActorVersionCollectionClient}
     */
    versions(): ActorVersionCollectionClient;
    /**
     * https://docs.apify.com/api/v2#/reference/actors/webhook-collection
     * @return {WebhookCollectionClient}
     */
    webhooks(): WebhookCollectionClient;
}
export interface Actor {
    id: string;
    userId: string;
    name: string;
    username: string;
    description?: string;
    restartOnError?: boolean;
    isPublic: boolean;
    isAnonymouslyRunnable?: boolean;
    createdAt: string;
    modifiedAt: string;
    stats: ActorStats;
    versions: ActorVersion[];
    defaultRunOptions: ActorDefaultRunOptions;
    exampleRunInput?: ActorExampleRunInput;
    isDeprecated?: boolean;
    deploymentKey: string;
    title?: string;
    taggedBuilds?: ActorTaggedBuilds;
}
export interface ActorStats {
    totalBuilds: number;
    totalRuns: number;
    totalUsers: number;
    totalUsers7Days: number;
    totalUsers30Days: number;
    totalUsers90Days: number;
    totalMetamorphs: number;
    lastRunStartedAt: string;
}
export interface ActorDefaultRunOptions {
    build: string;
    timeoutSecs: number;
    memoryMbytes: number;
}
export interface ActorExampleRunInput {
    body: string;
    contentType: string;
}
export interface ActorTaggedBuilds {
    latest: ActorTaggedBuild;
}
export interface ActorTaggedBuild {
    buildId?: string;
    buildNumber?: string;
    finishedAt?: string;
}
export declare type ActorUpdateOptions = Pick<Actor, 'name' | 'isPublic' | 'versions' | 'description' | 'title' | 'restartOnError'>;
export interface ActorStartOptions {
    build?: string;
    contentType?: string;
    memory?: number;
    timeout?: number;
    waitForFinish?: number;
    webhooks?: WebhookUpdateData[];
}
export interface ActorRun {
    id: string;
    actId: string;
    userId: string;
    actorTaskId?: string;
    startedAt: string;
    finishedAt: string;
    status: typeof ACT_JOB_TERMINAL_STATUSES[number];
    meta: ActorRunMeta;
    stats: ActorRunStats;
    options: ActorRunOptions;
    buildId: string;
    exitCode?: number;
    defaultKeyValueStoreId: string;
    defaultDatasetId: string;
    buildNumber: string;
    containerUrl: string;
}
export interface ActorRunMeta {
    origin: string;
    clientIp?: string;
    userAgent: string;
}
export interface ActorRunStats {
    inputBodyLen: number;
    restartCount: number;
    resurrectCount: number;
    memAvgBytes: number;
    memMaxBytes: number;
    memCurrentBytes: number;
    cpuAvgUsage: number;
    cpuMaxUsage: number;
    cpuCurrentUsage: number;
    netRxBytes: number;
    netTxBytes: number;
    durationMillis: number;
    runTimeSecs: number;
    metamorph: number;
    computeUnits: number;
}
export interface ActorRunOptions {
    build: string;
    timeoutSecs: number;
    memoryMbytes: number;
    diskMbytes: number;
}
export interface ActorBuildOptions {
    betaPackages?: boolean;
    tag?: string;
    useCache?: boolean;
    waitForFinish?: number;
}
export interface ActorLastRunOptions {
    status?: keyof typeof ACT_JOB_STATUSES;
}
//# sourceMappingURL=actor.d.ts.map